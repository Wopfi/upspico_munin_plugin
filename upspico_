#!/usr/bin/python

#%# capabilities=suggest
#%# capabilities=autoconf
#%# family=auto

import smbus
import sys, getopt
import subprocess
import os.path
import re


def main(argv):

  # get the full name of the calling script
  file = re.search( ".*?_(.*)", sys.argv[0] )

  if file:
    value_group = file.group(1)

  for opt in argv:
    # output the configuration data
    if opt == 'config':
      if value_group == 'temperature':
        print "graph_title UPS PIco Temperature"
        print "graph_vlabel C"
        print "graph_category sensors"
        print "pcb_temperature.label PCB Temperature"

      elif value_group == 'input_voltage':
        print "graph_category sensors"
        print "graph_title UPS PIco Input Voltage"
        print "graph_vlabel V"
        print "external_voltage.label Input Voltage"

      elif value_group == 'internal_voltages':
        print "graph_category sensors"
        print "graph_title UPS PIco Internal Voltages"
        print "graph_vlabel V"
        print "battery_voltage.label Battery Voltage"
        print "raspberry_voltage.label Raspberry Pi Voltage"

      elif value_group == 'power_mode':
        print "graph_title UPS PIco Mode"
        print "graph_args --base 1000 -l 0 --upper-limit 2"
        print "graph_category sensors"
        print "battery_active.label Battery powered"


      sys.exit()

    # output the suggestions for symlink names
    elif opt == 'suggest':
      print "temperature"
      print "input_voltage"
      print "internal_voltages"
      print "power_mode"
      sys.exit()

    # autoconf information
    elif opt == 'autoconf':
      print "yes"
      sys.exit()

  i2c = smbus.SMBus(1)

  # otherwise output the data depending on the script symlink name
  if value_group == 'input_voltage':

    data = i2c.read_word_data(0x69, 0x0c)
    data = format(data,"02x")
    externalVoltage = float(data) / 100

    print "external_voltage.value ", externalVoltage

  if value_group == 'internal_voltages':
    data = i2c.read_word_data(0x69, 0x08)
    data = format(data,"02x")
    batteryVoltage = float(data) / 100

    data = i2c.read_word_data(0x69, 0x0a)
    data = format(data,"02x")
    raspiVoltage = float(data) / 100

    print "raspberry_voltage.value ", raspiVoltage
    print "battery_voltage.value ", batteryVoltage

  elif value_group == 'temperature':
    data = i2c.read_byte_data(0x69, 0x1b)
    temp = format(data,"02x")

    print "pcb_temperature.value ", int(temp)

  elif value_group == 'power_mode':
    active = i2c.read_byte_data(0x69, 0x00)

    if int(active) == 1:
      battery = 0
    elif int(active) == 2:
      battery = 1

    print "battery_active.value ", battery

  sys.exit()

if __name__ == "__main__":
  main(sys.argv[1:])
